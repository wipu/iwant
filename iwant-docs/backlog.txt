#################################################################
= Done
#################################################################

+ As a @developer I want this backlog on the @website so it serves as a simple status, feature and plan documentation

+ As a @developer I want to start using iwant as soon as possible on the @cli level
  + stage 0: "as shell user i want to use iwant"
  + stage 1: "as iwant user i want to use iwant on iwant"
  + website (static) refresh, deploy and tag
  + implement the simplest possible bootstrap for generating a descript document
  * possibly no java needed at this stage

+ As a @developer I want to be able to drive the @cli by documentation, starting from step zero
  + use descript
  + publish

+ As a @developer I want all error lines shown in the descript document
  * Only the second line of the error message about missing MAGICHEADER is shown
  + don't echo > /dev/stderr but >> /dev/stderr, because descript redirects to a _file_

+ As a @buildscriptauthor I want an error message if and only if I try to start using iwant on an invalid workspace definition

+ As a @buildscriptuser I want a list of targets defined in the workspace
  * iwant/as-X-developer/list-of/targets
  * flat target namespace

+ As a @buildscriptuser I want the shell target scripts updated when I request a list of targets

+ As a @buildscriptauthor I want to define a target file with constant string content and get a path to it

+ As a @buildscriptauthor I want that my changes to the workspace definition are effective automatically (automatic compilation)
  + this not only works during as-iwant-user/to-use-iwant-on

+ As a @buildscriptuser I want a fresh java classes directory even if its sources have been touched

+ As a @buildscriptauthor and @buildscriptuser I want fresh java classes even if its dependencies have been touched

+ As a @buildscriptauthor and @buildscriptuser I want to get a junit test result as path, be it failure or success
  + path to stdout always, error notification to stderr
  + exit status is zero even if tests fail

+ As a @buildscriptuser I don't want a target refreshed if it sources are not newer than it
  * missing src <=> sources modified
  * directories are always treated as single entitites: their modification
    time is always the max of their content

+ As a @buildscriptuser I want a target refreshed if its content definition has changed, even if its sources have not been touched

+ As a @buildscriptauthor and @buildscriptuser I want to use slashes in my target names so I can organize and find them easier
  + create cache and content descriptor directories before refreshing
  + target detection is now dedicated to a unittested PathDigger
  + a target is now referred by its name (without cache dir), not the
    name of the method that defines it
  * only JUnit-tested, not descripted

+ As a @developer I want to use a different path to descript for tutorial generation
  * currently it's too expensive to robustly depend on it, maybe later, after full bootstrapping,
    this can easily be done properly
  + just change the hardcoded path from $wsroot/../../svn/trunk -> $wsroot/../ngrease

+ As a @buildscriptauthor I want a target content downloaded from an url and verified by md5
  + download if and only if cached copy missing
  + fail after download if and only if md5 mismatches
  + test that download is tried again after a failed effort (automatic cache invalidation)
  + test that cache md5 is not verified afterwards, this is different from many shell scripts
    (of mine and others) but consistent with the way iwant handles other types of targets
  + descript depending to a downloaded library from java classes

#################################################################
= Planned
#################################################################

- As a @developer I want to move shell functionality into sourcable functions so that it will be easier to create different wrapper scripts and to restructure the scripts
  + bootstrap functions
  + as-iwant-user targetscript generation
  + separate step for using iwant on iwant (creating the as-iwant-developer dir)
  - replace the internal scripts with functions
  - use only relative paths to source functions in all wrappers scripts

- As a @buildscriptauthor I want to define my targets in a tree of ContainerPaths for even easier organization
  - descript
  - PathDigger must detect and dive into methods that return a child ContainerPath
  - maybe there is no reason *not* to keep on prepending path names with their
    parent (container) path name

- As a @buildscriptauthor I want to be able to define tests for my workspace definition so if I break it iwant won't use it
  * this is essential for bootstrapping

- As a @developer I want iwant itself compiled with its workspace definition and tested with it so that I can bootstrap the whole tool, tested and working
  * if iwant gets later split into submodules, include only essentials here

- As a @buildscriptauthor I want an error message if I refer to a java classes directory with a missing source
  * in the tutorial, call these test classes, to maintain the red-green cycle later
  + done but untested and undefined details

- As a @buildscriptuser I want an error message if I refer to a java classes directory of uncompilable sources
  + done but untested and undefined details

#################################################################
= Story sketches, to be evaluated and or rewritten
#################################################################

- As a @buildscriptuser I want to see a refresh plan for any target so I know if I really have time to refresh it yet

- As a @buildscriptuser I want to see a time estimate in a refresh plan, based on previous refresh(es)

- As a @buildscriptuser I want iwant to refresh targets automatically in parallel and letting me define the number of threads to use
  - TODO on commandline, in a conf file, something else or all of them?
  - TODO automatic detection of cpu count and using it for a good default?

- As a @buildscriptauthor I want to declare some targets single-threaded so targets depending on it get never refreshed in parallel
  * e.g. for tests that need the display, a certain shared sql table area or some other shared resource

- As a @buildscriptuser I want targets refreshed in an order that tries to find cumulative problems as early as possible
  * meaning targets that are most depended on are built first
    so if they have problems, their dependencies probably need
    to be refreshed again anyway
  * if equal, recurse into targets depending on them

- As a @buildscriptauthor I want iwant to use some non-default package for my workspace definition class and iwant still to be able to auto-detect the source directory location
  * read the package declaration from the java file to deduce where the src root is
  + now as-iwant-user/to-use-iwant-on requires all data as cli arguments
    so this story no more makes sense

- As a paranoid @buildscriptauthor I want some control over the validity of my downloaded targets
  * if the current consistent "assume nobody is fool enough to touch the cache" strategy seems to work,
    just provide a wish for checking the cached targets, one by one or all at once
