#################################################################
= Done
#################################################################

+ As a @developer I want this backlog on the @website so it serves as a simple status, feature and plan documentation

+ As a @developer I want to start using iwant as soon as possible on the @cli level
  + stage 0: "as shell user i want to use iwant"
  + stage 1: "as iwant user i want to use iwant on iwant"
  + website (static) refresh, deploy and tag
  + implement the simplest possible bootstrap for generating a descript document
  * possibly no java needed at this stage

+ As a @developer I want to be able to drive the @cli by documentation, starting from step zero
  + use descript
  + publish

+ As a @developer I want all error lines shown in the descript document
  * Only the second line of the error message about missing MAGICHEADER is shown
  + don't echo > /dev/stderr but >> /dev/stderr, because descript redirects to a _file_

+ As a @buildscriptauthor I want an error message if and only if I try to start using iwant on an invalid workspace definition

+ As a @buildscriptuser I want a list of targets defined in the workspace
  * iwant/as-X-developer/list-of/targets
  * flat target namespace

+ As a @buildscriptuser I want the shell target scripts updated when I request a list of targets

+ As a @buildscriptauthor I want to define a target file with constant string content and get a path to it

+ As a @buildscriptauthor I want that my changes to the workspace definition are effective automatically (automatic compilation)
  + this not only works during as-iwant-user/to-use-iwant-on

+ As a @buildscriptuser I want a fresh java classes directory even if its sources have been touched

+ As a @buildscriptauthor and @buildscriptuser I want fresh java classes even if its dependencies have been touched

+ As a @buildscriptauthor and @buildscriptuser I want to get a junit test result as path, be it failure or success
  + path to stdout always, error notification to stderr
  + exit status is zero even if tests fail

+ As a @buildscriptuser I don't want a target refreshed if it sources are not newer than it
  * missing src <=> sources modified
  * directories are always treated as single entitites: their modification
    time is always the max of their content

+ As a @buildscriptuser I want a target refreshed if its content definition has changed, even if its sources have not been touched

+ As a @buildscriptauthor and @buildscriptuser I want to use slashes in my target names so I can organize and find them easier
  + create cache and content descriptor directories before refreshing
  + target detection is now dedicated to a unittested PathDigger
  + a target is now referred by its name (without cache dir), not the
    name of the method that defines it
  * only JUnit-tested, not descripted

+ As a @developer I want to use a different path to descript for tutorial generation
  * currently it's too expensive to robustly depend on it, maybe later, after full bootstrapping,
    this can easily be done properly
  + just change the hardcoded path from $wsroot/../../svn/trunk -> $wsroot/../ngrease

+ As a @buildscriptauthor I want a target content downloaded from an url and verified by md5
  + download if and only if cached copy missing
  + fail after download if and only if md5 mismatches
  + test that download is tried again after a failed effort (automatic cache invalidation)
  + test that cache md5 is not verified afterwards, this is different from many shell scripts
    (of mine and others) but consistent with the way iwant handles other types of targets
  + descript depending to a downloaded library from java classes

+ As @developer I want iwant tests to at least sleep a shorter time to test timestamp-based features, if ant tasks make it impossible to mock time
  * 2000ms -> 10ms, seems to work

+ As a @buildscriptauthor I want to svn export an iwant bootstrapper that will guide me to bootstrap iwant from a given source (src-url or svn revision) and form the wishdir root for the ws
  * the bootstrapper will be named iwant/help.sh (under as-x-developer)
  * help.sh=>iwant-version.conf created; edit it and rerun help.sh=>bootstrap
  + local descript tutorial
    + copy bootstrapper from local dir instead of svn exporting
      * don't copy its cache
    + descript bootstrapping by using the local iwant
  + real svn export
    + temporarily run local descript with real svn export
  + after commiting bootstrapper: real descript tutorial
    + svn export bootstrapper
    + descript bootstrapper
  + clean descript outputs and assert them

+ As a @developer I want the long sleep back, since the shorter sleep causes a test failure occasionally (WorkspaceBuilderTest.java line 376)

+ As a @buildscriptuser I want a target "eclipse-projects" in the stub that generates eclipse .project and .classpath for the wsdef project
  + descript
    + existence of the target
    + that it creates the correct files
  + content EclipseProjects, using .classpath and .project content from EclipseProject
    + use absolute paths to link to the actual project sources,
      eclipse requires this since it's outside the project dir
    + absolute paths for libs
    * these are not properly tested, since the test gives WorkspaceBuilder absolute paths, but these things will be improved by future stories about absolute/relative
  + real use (in the gluent project) and publish
    + fix wsdef src path
    + publish

+ As a @buildscriptauthor I want to delegate actual workspace definition to a second phase so I can use 3rd party code in its own definition.
  + descript
  + test
  + impl  

+ As a @buildscriptauthor I want to use SHA to verify integrity of downloaded files
      
+ As a @buildscriptauthor I want iwant to automatically rebootstrap itself when I make any wish after I have changed iwant-version.conf
  * descript by upgrading after demoing that some new feature doesn't work with an older iwant version
  ? how to do in local tutorial?
    * svn co an older revision in local cache just for this?
  + make bootstrapper help.sh cache the iwant-from.conf and compare it to see
    if fetch is needed
  + make normal wish scripts do the same check
    + implement (test later, since requires real commits)
      * kiss: just call iwant/help.sh, redirecting output
      + handle abs/relative paths (a bit) better in help.sh
    + descript with the non-local tutorial
      + first bootstrap an older version
      + try to use a new feature (Downloaded.sha), expect failure
      + upgrade iwant version, retry and expect success

+ As a @buildscriptauthor I want my eclipse settings automatically updated when I touch the workspace definition
  + prototype eclipse ant builder in the gluent project
  + test and implement generation of it
  + ant targets for selected public iwant targets
  + use in gluent to verify

+ As a @buildscriptuser I want target paths to be output as absolute, to make them more useful externally
  * when using "target/X/as-path", not ".../as-rel-path"

+ As a @buildscriptauthor I want to define a target content with a shell script so I can utilize tools that are not available for the JVM
  + descript and test
  + make iwant provide a RefreshEnvironment that not only provides the destination File but also a temporary directory, if needed
  + run the script in the temporary directory
  + print summary of the script's stdout and stderr to stderr

+ As a @contentauthor I want the misleading sources/dependencies separation replaced with a simpler concept: ingredients
  * sources doesn't mean the paths are necessarily of type Source
  * instead they mean their timestamps determine needsRefreshing
  * this is unnecessary (until proven otherwise): a target needs refreshing when any of its
    ingredients (paths it refers or _may_ refer to during refresh) has been touched
  * dependencies are just ingredients of type Target i.e. possibly needing refreshing
  + do it
  + fix tutorial

+ As a @buildscriptdeveloper I want the Target class parameterized by its Content so I can use methods from the content, like classpath from JavaClasses
  + add generics to
    + Target
    + builder for it
  + tutorial to use generics
  + stub workspace to use generics
    + impl
    (- test/fix tutorial after commit)
       * local bootstrapper was used, after all; it was
         a descript bug (unescaped < in the command output)

+ As a @buildscriptauthor I want content concatenated from content of other Paths or String or byte[] literals
  * this is important for dynamic scripts that use other paths as ingredients
  + test and implement
  * not descripting in tutorial, this is really nothing new

+ As a developer I want Locations out of Paths so they will be easier to use embedded, for example in tests
  * name returns the relative path, asAbsolutePath is abstract and takes Locations as parameter 

#################################################################
= In progress
#################################################################

- As a @developer I want to clean up the code here and there to get ready for adding lots of features and to make things easier otherwise
  + rename Suite to IwantSuite to differentiate it from other projects
  - split WorkspaceBuilderTest
    - reusable utilities in base class or driver
      + methods in base class
      - helpers for src content declaration
      - use all helpers
    - split by feature

#################################################################
= Planned
#################################################################

- As @buildscriptauthor I want to use some simpler syntax for the whole buildscript so iwant will be more ergonomic for really small projects that don't need java and IDE for anything
  * ngr or even simpler?
  * if custom content or anything fancier is needed, I guess it's ok to require java

- As a @developer I want a fixed version of descript that escapes "<" correctly in editor and console divs
  + first just a workaround sed hack in the script that generates the tutorial
  - then the real thing

- As a @buildscriptuser I want the generated eclipse project to use normal src, because subclipse doesn't show local changes in linked sources
  + implement
  - test in real project (gluent)
  - descript that now the project files need to be copied in place, the projects don't
    work if imported from the cache

- As a @buildscriptuser I want several srcs in an eclipse project
  + implement
  - test in real project (gluent)
  - descript

- TODO eclipse project stories
  - dep to other eclipse projects as project deps, not to iwant cache
  - src dir from the classes target, not hardcoded "src"
  - and support multiple sources for the classes (if supported by the JavaClasses content)
    * or some other helper to create an eclipse project for given classes and test-classes
  - src link name? maybe src-main or something, when supporting many sources and test classes?
  - distinction between targets and nontargets is clumsy: why not just declare all needed paths as dependencies? would make it easier to build eclipseprojects from javaclasses
  - somehow make it unnecessary to get content from target and cast it

- As a @buildscriptauthor I want the bootstrapper to guide me to configure the workspace and its wsdef and generate the wsdef stub
  * help.sh=>ws-info.conf created; edit it and rerun help.sh=>a working ws and list-of/targets for it
  * make the functions work with the new as-x-developer/iwant wording instead of the old "centralized iwant" iwant/as-x-developer wording
  + modify the bootstrap section of tutorial
  + make it pass
    + use paths relative to iwant (wishdir)
    + etc
    + improve descript (ext ngrease) to support relative in and out and explicit file creation content path
  - clean up dots<->slashes conversions (java package) in the bootstrapper
  + fix: some script puts and extra "/iwant" in a path (the iwant test during bootstrapping?), generating an extra local change when running refresh.sh
  + upgrade tutorial revisions and publish

- As a @buildscriptauthor I want the bootstrapper to svn:ignore all directories it generates so I won't see any local changes there
  + as-iwant-user target cached list-of
  - test in a real project this is enough

- As a @buildscriptauthor I want iwant the JavaClasses content to remember the order of "using" calls so I can control the actual classpath in the unfortunate case I need classpath items that contain the same fqcn's with different semantics (a real problem in the real world, especially in the enterprise/xml world)
  - save the cpitems internally in a list, even though publishing them as an alphabetical sortedset for depencency management
  - use the list during compilation
  - use the list when generating eclipse .classpath

- As a @buildscriptuser I want to be able to move the whole workspace without breaking iwant
  * use only relative paths internally
  * should be mostly done, but
  - descript and fix possible problems

- As a @buildscriptuser I want any output relative paths in a minimal form, without extra ".."s
  - mostly the bootstrapper outputs these, find out where else
  + the "target/X/as-rel-path" now works nicely

- As a @developer I want to move shell functionality into sourcable functions so that it will be easier to create different wrapper scripts and to restructure the scripts
  + bootstrap functions
  + as-iwant-user targetscript generation
  + separate step for using iwant on iwant (creating the as-iwant-developer dir)
  + replace the internal scripts with functions
    + remove the unneeded iwant-path.sh
    + make to-use-iwant-on use just one sourced function call
  - use only relative paths to source functions in all wrappers scripts
  - mark this story done when it has proven itself by making the "as-x-developer/iwant" structure possible
    + that's done but
    - the final proof will be that relocating the whole workspace won't break anything (another story)

- As a @buildscriptauthor I want all cached targets invalidated when iwant is rebootstrapping itself because I changed its version
  * even downloaded files, for now (the "don't do it" rule of optimization)

- As a @buildscriptauthor I want to define my targets in a tree of ContainerPaths for even easier organization
  - descript
  - PathDigger must detect and dive into methods that return a child ContainerPath
  - maybe there is no reason *not* to keep on prepending path names with their
    parent (container) path name

- As a @buildscriptauthor I want to be able to define tests for my workspace definition so if I break it iwant won't use it
  * this is essential for bootstrapping

- As a @developer I want iwant itself compiled with its workspace definition and tested with it so that I can bootstrap the whole tool, tested and working
  * if iwant gets later split into submodules, include only essentials here

- As a @buildscriptauthor I want an error message if I refer to a java classes directory with a missing source
  * in the tutorial, call these test classes, to maintain the red-green cycle later
  + done but untested and undefined details

- As a @buildscriptuser I want an error message if I refer to a java classes directory of uncompilable sources
  + done but untested and undefined details

- As a @buildscriptauthor I want to define a target for debugless java classes so I can ship my code

#################################################################
= Story sketches, to be evaluated and or rewritten
#################################################################

- EPIC: As a @buildscriptauthor that has to serve users that don't have unix tools installed I want iwant to provide a JPC-based virtual machine for running my scripts
  - a way to command the VM and read its results
  - a very minimal disk image that contains basic tools

- As a @buildscriptauthor I want an easy way to define a virtual machine image that contains the software I need so the base image shipped with iwant can be small

- As a @buildscriptuser I want to see a refresh plan for any target so I know if I really have time to refresh it yet

- As a @buildscriptuser I want to see a time estimate in a refresh plan, based on previous refresh(es)

- As a @buildscriptuser I want iwant to refresh targets automatically in parallel and letting me define the number of threads to use
  - TODO on commandline, in a conf file, something else or all of them?
  - TODO automatic detection of cpu count and using it for a good default?

- As a @buildscriptauthor I want to declare some targets single-threaded so targets depending on it get never refreshed in parallel
  * e.g. for tests that need the display, a certain shared sql table area or some other shared resource

- As a @buildscriptuser I want targets refreshed in an order that tries to find cumulative problems as early as possible
  * meaning targets that are most depended on are built first
    so if they have problems, their dependencies probably need
    to be refreshed again anyway
  * if equal, recurse into targets depending on them

- As a @buildscriptauthor I want iwant to use some non-default package for my workspace definition class and iwant still to be able to auto-detect the source directory location
  * read the package declaration from the java file to deduce where the src root is
  + now as-iwant-user/to-use-iwant-on requires all data as cli arguments
    so this story no more makes sense

- As a paranoid @buildscriptauthor I want some control over the validity of my downloaded targets
  * if the current consistent "assume nobody is fool enough to touch the cache" strategy seems to work,
    just provide a wish for checking the cached targets, one by one or all at once
