#################################################################
= Done
#################################################################

+ As a @developer I want this backlog on the @website so it serves as a simple status, feature and plan documentation

+ As a @developer I want to start using iwant as soon as possible on the @cli level
  + stage 0: "as shell user i want to use iwant"
  + stage 1: "as iwant user i want to use iwant on iwant"
  + website (static) refresh, deploy and tag
  + implement the simplest possible bootstrap for generating a descript document
  * possibly no java needed at this stage

+ As a @developer I want to be able to drive the @cli by documentation, starting from step zero
  + use descript
  + publish

+ As a @developer I want all error lines shown in the descript document
  * Only the second line of the error message about missing MAGICHEADER is shown
  + don't echo > /dev/stderr but >> /dev/stderr, because descript redirects to a _file_

+ As a @buildscriptauthor I want an error message if and only if I try to start using iwant on an invalid workspace definition

+ As a @buildscriptuser I want a list of targets defined in the workspace
  * iwant/as-X-developer/list-of/targets
  * flat target namespace

+ As a @buildscriptuser I want the shell target scripts updated when I request a list of targets

+ As a @buildscriptauthor I want to define a target file with constant string content and get a path to it

+ As a @buildscriptauthor I want that my changes to the workspace definition are effective automatically (automatic compilation)
  + this not only works during as-iwant-user/to-use-iwant-on

+ As a @buildscriptuser I want a fresh java classes directory even if its sources have been touched

+ As a @buildscriptauthor and @buildscriptuser I want fresh java classes even if its dependencies have been touched

+ As a @buildscriptauthor and @buildscriptuser I want to get a junit test result as path, be it failure or success
  + path to stdout always, error notification to stderr
  + exit status is zero even if tests fail

+ As a @buildscriptuser I don't want a target refreshed if it sources are not newer than it
  * missing src <=> sources modified
  * directories are always treated as single entitites: their modification
    time is always the max of their content

+ As a @buildscriptuser I want a target refreshed if its content definition has changed, even if its sources have not been touched

+ As a @buildscriptauthor and @buildscriptuser I want to use slashes in my target names so I can organize and find them easier
  + create cache and content descriptor directories before refreshing
  + target detection is now dedicated to a unittested PathDigger
  + a target is now referred by its name (without cache dir), not the
    name of the method that defines it
  * only JUnit-tested, not descripted

+ As a @developer I want to use a different path to descript for tutorial generation
  * currently it's too expensive to robustly depend on it, maybe later, after full bootstrapping,
    this can easily be done properly
  + just change the hardcoded path from $wsroot/../../svn/trunk -> $wsroot/../ngrease

+ As a @buildscriptauthor I want a target content downloaded from an url and verified by md5
  + download if and only if cached copy missing
  + fail after download if and only if md5 mismatches
  + test that download is tried again after a failed effort (automatic cache invalidation)
  + test that cache md5 is not verified afterwards, this is different from many shell scripts
    (of mine and others) but consistent with the way iwant handles other types of targets
  + descript depending to a downloaded library from java classes

+ As @developer I want iwant tests to at least sleep a shorter time to test timestamp-based features, if ant tasks make it impossible to mock time
  * 2000ms -> 10ms, seems to work

+ As a @buildscriptauthor I want to svn export an iwant bootstrapper that will guide me to bootstrap iwant from a given source (src-url or svn revision) and form the wishdir root for the ws
  * the bootstrapper will be named iwant/help.sh (under as-x-developer)
  * help.sh=>iwant-version.conf created; edit it and rerun help.sh=>bootstrap
  + local descript tutorial
    + copy bootstrapper from local dir instead of svn exporting
      * don't copy its cache
    + descript bootstrapping by using the local iwant
  + real svn export
    + temporarily run local descript with real svn export
  + after commiting bootstrapper: real descript tutorial
    + svn export bootstrapper
    + descript bootstrapper
  + clean descript outputs and assert them

+ As a @developer I want the long sleep back, since the shorter sleep causes a test failure occasionally (WorkspaceBuilderTest.java line 376)

+ As a @buildscriptuser I want a target "eclipse-projects" in the stub that generates eclipse .project and .classpath for the wsdef project
  + descript
    + existence of the target
    + that it creates the correct files
  + content EclipseProjects, using .classpath and .project content from EclipseProject
    + use absolute paths to link to the actual project sources,
      eclipse requires this since it's outside the project dir
    + absolute paths for libs
    * these are not properly tested, since the test gives WorkspaceBuilder absolute paths, but these things will be improved by future stories about absolute/relative
  + real use (in the gluent project) and publish
    + fix wsdef src path
    + publish

+ As a @buildscriptauthor I want to delegate actual workspace definition to a second phase so I can use 3rd party code in its own definition.
  + descript
  + test
  + impl  

+ As a @buildscriptauthor I want to use SHA to verify integrity of downloaded files
      
+ As a @buildscriptauthor I want iwant to automatically rebootstrap itself when I make any wish after I have changed iwant-version.conf
  * descript by upgrading after demoing that some new feature doesn't work with an older iwant version
  ? how to do in local tutorial?
    * svn co an older revision in local cache just for this?
  + make bootstrapper help.sh cache the iwant-from.conf and compare it to see
    if fetch is needed
  + make normal wish scripts do the same check
    + implement (test later, since requires real commits)
      * kiss: just call iwant/help.sh, redirecting output
      + handle abs/relative paths (a bit) better in help.sh
    + descript with the non-local tutorial
      + first bootstrap an older version
      + try to use a new feature (Downloaded.sha), expect failure
      + upgrade iwant version, retry and expect success

+ As a @buildscriptauthor I want my eclipse settings automatically updated when I touch the workspace definition
  + prototype eclipse ant builder in the gluent project
  + test and implement generation of it
  + ant targets for selected public iwant targets
  + use in gluent to verify

+ As a @buildscriptuser I want target paths to be output as absolute, to make them more useful externally
  * when using "target/X/as-path", not ".../as-rel-path"

+ As a @buildscriptauthor I want to define a target content with a shell script so I can utilize tools that are not available for the JVM
  + descript and test
  + make iwant provide a RefreshEnvironment that not only provides the destination File but also a temporary directory, if needed
  + run the script in the temporary directory
  + print summary of the script's stdout and stderr to stderr

+ As a @contentauthor I want the misleading sources/dependencies separation replaced with a simpler concept: ingredients
  * sources doesn't mean the paths are necessarily of type Source
  * instead they mean their timestamps determine needsRefreshing
  * this is unnecessary (until proven otherwise): a target needs refreshing when any of its
    ingredients (paths it refers or _may_ refer to during refresh) has been touched
  * dependencies are just ingredients of type Target i.e. possibly needing refreshing
  + do it
  + fix tutorial

+ As a @buildscriptdeveloper I want the Target class parameterized by its Content so I can use methods from the content, like classpath from JavaClasses
  + add generics to
    + Target
    + builder for it
  + tutorial to use generics
  + stub workspace to use generics
    + impl
    (- test/fix tutorial after commit)
       * local bootstrapper was used, after all; it was
         a descript bug (unescaped < in the command output)

+ As a @buildscriptauthor I want content concatenated from content of other Paths or String or byte[] literals
  * this is important for dynamic scripts that use other paths as ingredients
  + test and implement
  * not descripting in tutorial, this is really nothing new

+ As a @developer I want Locations out of Paths so they will be easier to use embedded, for example in tests
  * name returns the relative path, asAbsolutePath is abstract and takes Locations as parameter 

+ As a @developer I want even the strictest generics-related eclipse warnings fixed so I can use generics more efficiently

+ As a @developer I want to replace the ngrease-based descript with the new standalone descript so I can start document-driving ant bootstrapping more easily

+ As a @buildscriptauthor I want to use ant to bootstrap iwant so I can take it into use in a project where not everybody chooses bash
  * delegate as much as possible to "phase 2" exported from actual iwant
  + empty descript article "Bootstrapping with ant"
  + local version
    + copy bootstrap phase 1
    + run to generate iwant-from
    + run to read incorrect iwant-from
    + run to read correct iwant-from
    + download svnkit if not downloaded
    + make the caller cache it and copy to place to avoid downloading
    + modify dir structure so ant and bash users will share iwant/cached
      * as-example-developer/{iw,iwant,i-have}
    + svn export (ignoring rev) iwant-src
    + delegate to phase2
    + download jars
    + share "cached unmodifiable" (use the same for the optimization above)
      and use it to optimize jars
      + phase1 uses default when not set
      + phase2 requires it from phase1
    + compile iwant-classes and test-classes
    + write and delegate to "Phase3.class"
      (- run tests: not yet, see a dedicated story)
      * it's called Iwant.class
      + create bin: just an ant path for ext-jars at this stage
      + call bin to continue bootstrapping
      + create wsdef-info from Iwant.class
        + fix file content assertion: don't use BufferedReader.readLine, it
          won't detect missing trailing newline
      + don't print stacktrace but still fail
        * System.exit probably needed
      + read wsdef-into
      + generate example Workspace
      + work from then on
        + print usage help when target wish is missing
        + refresh wished target
          + create and refresh wsDefClasses Target
            + use builtins in classpath
              + build iwant-lib
              + pass iwant-lib to Iwant.class
              + put it and all relevant paths to Locations
          + refresh as NextPhase
          + missing target => make NextPhase forked java throw
        + list-of/targets
          * just set the wish in phase1.xml

+ As @developer I want sleep forged by moving testarea timestamps back so tests are faster

+ As eclipse user I want my eclipse environment creator script shared as part of iwant so I and my colleagues can use it anywhere and I can later integrate it with iwant

+ As a @developer I want a fixed version of descript that escapes "<" correctly in editor and console divs
  + first just a workaround sed hack in the script that generates the tutorial
  + then the real thing
  * marked done afterwards

+ As @developer I want help.sh (bash bootstrapper phase1) to delegate most work to the ant script so I can start gettin rid of a lot of legacy scripts
  - new bootstrap tutorial for driving
    * the tutorial wish script creation is very redundant but will be replaced with real iwant target later so it's ok
    + source the ant tutorial
    + hello from help.sh
  + first just use os-provided ant
  + abstract descripted cli so bash tutorial can override ant tutorial
  + simply cd to iw and call ant
    + first two calls
    + all calls
  + document both clis in both bootstrapping tutorials
  + "abusing internals" cli for bash
    + pass -D/target/... to ant
    + when refreshing targets, make sure only path to cached goes to stdout
      + hack: use sysprop to tell java layer to prefix all relevant output so the bash cli can filter non-prefixes output and redirect by prefix (out/err)
  + (don't clear the "optimization cache" in the old deprecated "paranoia build" refresh.sh)
  + generate wish scripts in "Phase3" to make bash cli work again properly
    + bootstrap descript: list and use them
    + tests (also for scenarios where the scripts are not touched)
    + refresh list-of/targets, use it
    + use print prefix in tests to make sure they don't break the list of targets
  + mention both clis in the help output
    + bugfix: colon broke the old awk script in help.sh, replaced with more robust stream splitting

+ As @buildscriptauthor (especially iwant @developer wanting to bootstrap) I want bootstrapping cli's in a different directory than i-have so that I can svn:external the former and version the latter
  * as-someone/with/{ant,bash}

+ As eclipse user I want new-eclipse-env.sh to use the "r=1" trick (documented in eclise bug #359826) for load balancing of downloads

+ As @buildscriptuser I want iwant to stream stderr in realtime when refreshing a target (e.g. script running descript) so I can track its progress and debug the script
  + implement for ScriptGeneratedContent and change tests (merge out and err and no more headers in output)
  + implement for NextPhase etc
  + test manually to make sure it really streams (tests don't test that)
    * exec seems to buffer and output the stream in bursts, see a later story

+ bugfix: As @developer I want internal errors prefixed too, so users can report them
  + catch Exception, not only IwantException, and print prefixed

+ As a @buildscriptauthor I want the bootstrapper to svn:ignore all directories it generates so I won't see any local changes there
  + as-iwant-user target cached list-of
  + test in a real project this is enough

+ bugfix: delete java classes dir before compilation, otherwise some timestamps are not touched and the dir is always not fresh
  + test with a script that just mkdirs
    because currently localWebsite fails on 2nd run because it does not rm the dir first
    => seems that this is a universally desirable feature => let iwant do it for
       all targets before refreshing
  (- replace mkdir with FileUtils.ensureEmpty)

+ As @buildscriptauthor I don't want to use iwant-rev in i-have/iwant-from.conf but just point iwant-url to a published tag so I can more easily point to a stable publication instead of a "random" rev
  * also easier to implement: it's always just iwant-url
  + don't require it
  + remove from generated i-have/iwant-from.conf
  + update descript tests and run local ones
  + commit and run remote ones
    + aaand fix error in locals, too, caused by:
      * I wished the targets by evaluating a script without set -eu => failures were not detected on run #1
      * story about deleting cached target after failure is not implemented => run #2 didn't even refresh
      * and the error itself: iwant-r$REV references here and there, cached iwant is now "iwant"
    + update bootstrapper rev in tutorials

+ As @developer I want stderr coloured so I can see which build failures are printed by descript scripts and which are read failures
  + copy logcolor function from descript and use

+ bugfix: 1st script of ScriptGeneratedContent is not replaced for further targets
  * ant copy does not overwrite
  + fix by clearing the whole temp area when user requests for it
  + don't call the clearing method when copying the temp area to a new RefreshEnvironment instance

+ As @buildscriptauthor I want to create Target collection programmatically instead of declaring them as public methods for reflection so I can generate dynamic targets
  + ask targets directly from ContainerPath and make it use reflection by default, users can override

#################################################################
= In progress
#################################################################

- As @buildscriptauthor and @developer I want the work-in-progress ant-based bootstrapper replaced with a mostly java-based one so it will be simpler and also provide a java entry point for embedded use
  + distillery directory for low-ceremony development
  + driver script (refresh.sh)
    + compile java entry point with tests
      * just use junit jar assumedly downloaded by the current as-iwant-developer iwant
    + run junit tests
      * they drive as much as possible (as much responsibility to java as possible)
    + descript with versioned output for easy and pragmatic TDD: no need to edit expectations, just verify output diffs by eye before commits
      + cmd echo hello, version output
  + descript svn-exports the cli
  + descript runs help.sh
  + refresh.sh unit tests help.sh
    + create mock java entry that prints cwd and cmdline args
    + assert stdout, stderr and cwd
  + help.sh does NOT cd but passes AS_SOMEONE as the 1st cmdline arg
    * this way the java entry is more robust and useful in envs that make
      it more cumbersome to control cwd (like eclipse)
  + 1st call to help.sh prints "I created iwant-from for you"
    + descript
    + junit
  + 1st call creates example iwant-from.conf
    + descript
    + junit
  + reusable module iwant-testarea
  + junit: as-someone arg or dir missing => main fails
  + iwant-from points to local iwant wsroot, run
    + descript a bit
      + edit iwant-from
    + junit
      + mocked url provider for svnkit jar
      + mocked cache location for unmodifiable
      + real values for locations
      + get svnkit jar from downloader method
        + robust cache path for url
        + entry asks cache location from the mockable network interface
          so the download test can control the cache
        + test download of correct content when cached missing
        + test does not download when cached exists
        + unzip method
          + test with hard-coded small zipfile
        + svnkit download method
          + test with mocked url and cache
          + assert result is an unzipped dir that contains the unzipped url
      + svn export of iwant
        + export when cached iwant missing
          + utilize the tested download method to get svnkit for the test
            + in suite, test all needed functionality before this test:
              + download
              + real cache location
              + real svnkit location
            + test class, setUp ensures cached unzipped svnkit
            + versioned mock iwant rootdir
            + assert export method exports to given dir
              + pass url to cache location method so the mock can
                mock all but the svnkit zip cache
      + fix: find wsroot even when running refesh.sh
      + don't generate entry2 mock now that we have one versioned
      + fix: unzip works with test files but not with svnkit zip
        * currently tests pass only if fixing the real cache by hand
        + test if it is because of jars inside zip
        + test if it is because parent dirs come after their content in the stream
        + fixed: it was just awfully slow because of no buffering: I had just stopped a test so I got a partially unzipped svnkit there, doh!
      + junit: bootstrap when only iwant-from is given
        * removed the test for already downloaded iwant
        + point svnkit url to really downloaded file
        + assert hello from entry 2 using the mocked wsroot
        + assert hello from mocked entry 1, referenced by entry 2 to prove the common functionality from there can also be evolved without breaking runtime
      + delegate to entry2
        + write mock impl of entry2
        + test correct args get passed
        + impl: compile and run
  + descript bootstrap call: call help.sh to show real iwant2 output
    + implement failing iwant2
  - iwant2
    * now just KISS: don't use iwant (workspace, targets), just raw
      download+compilation using entry 1. Later we can eat the dogfood,
      when we have it
    + no i-have/ws-info => fail with message, example created
      * ha, TDD again drives design: I don't want to call Iwant2.main!
      + instead: Iwant2.using(nw) just like Iwant
        * Iwant still calls Iwant2 by main, because it will always
          use the real locations and because they have different classloaders
          so there isn't even an easy way to pass other than standard classes
      + test & impl
      + descript
        + make entry2 main call evaluate with real locations
        + catch IwantException (a non-bug one), print message and exit 1
        + don't prevent system exit in entry1 when calling entry2
        + cat the example ws-info
    + delegate to actual (distilling) iwant
      + Iwant3 and its test to do what Iwant2 does now
      - Iwant2's new role
        + compile iwant (distillery2) main
        + run main suite
          + compile tests, too
          + download junit.jar
          + mock-wsroot to test both test failure and success
        + 3rd delegation: iwant2 -> iwant3
          + only if test passes
  + debug log disabled
  + run junit silently and only print after failure
    (failure tested only manually with temporarily broken test)
  - iwant3
    + invalid wsinfo => failure
    + valid wsinfo => create example wsdef java
    + descript: rerun with example ws-info => fail with message, example wsdef java created
    + forge junit times in the descript to prevent unnecessary diffs
    + create wish scripts, not only example wsdef
    + wish scripts call help.sh with own relpath as arg
    + descript: iwant3 prints hardcoded output for list-of/targets and hello
    - functional example wsdef
      + copy example java from actual source directory
        + use WsRootFinder to find it
      - descript: rerun with example wsdef => "try .../list-of/targets"
      - inherit a base wsdef
      - test-drive base
  - move WsRootFinder to main src from test
  - dedicated module for WsRootFinder, replace other classpath markers (in testarea at least) with this
  + compile iwant to separate dir, not a subdir of exported wsroot
    * it was already like this, the dir was a leftover of some work in progress testrun
  + svn export laziness/eagerness
    + no export when cached iwant exists
    + except when remote is a file: changes in entry2 are effective immediately when developing, if local dir is deleted and re-exported
  + slighty nicer stderr: ":task -> destfile" and "(task debug message)*"
  - laziness of compilation of unmodifiable
  - laziness of svn export
  - remove the zip tests using versioned zip files now that we have the svnkit unzip test
  - checksum after download
     - test download of incorrect content causes failure (sha check)
     - test sha failure causes rename of cached file
  - incorrect iwant-from => friendly error
  - maybe: more expandable contract between entry and entry2
    - instead of assuming entry2 can only depend on entry, there could
      be a text file that can be passed as the source list to javac
  - new name for cache: as-someone/.iwanted
    * no more with/bash: cli does not matter
    * past tense shows for the possible user of the path that this is potentially stale data
  - user-specific external dependencies cache: ~/.iwant/cached/by-url/<escaped-url-with-slashes>
  - maybe: another entry method: one with given iwant-from, for fully embedded case
    where a file is not needed for that
    ? on the other hand, the as-someone dir is needed anyway
  - remove main and its tests from core
    * the entry is the only main, from then on just proper java
  - from java both entry and entry2 are usable as entry points
  - publish
    - modify bootstrapping tutorials
    - clean up the other bootstrapper story

- As @buildscriptauthor I want a java API for iwant so I can easily build things embedded in a java program, without having to operate on file and cli level
  + reusable TestArea for testing
  - Targets
    + interface for declaring Target collection
    - many Targets with dependency
  - NextPhase

- bugfix: as @buildscriptauthor I want to append Paths explicitly as Paths to Concatenated content so the target will be refreshed when the paths have been touched
  + test
  + implement path(Path path)
  + use in the descript script content target
  - use in the gluent project

- As @developer I want iwant to bootstrap itself properly so I can get rid of the first generation bootstrapping hack scripts that are no more fun to maintain
  + bootstrapper as svn:externals, mainly for "real-life testing"
  * we could put the whole bootstrapper under as-iwant-developer, but that would look silly in the url users use, symlink/external/whatever more explicitly documents that iwant _uses_ itself for bootstrapping
  + define and commit "default-wsroot" in phase1 build.xml, because svn export does not like "file://${i-have}/../.."
  + use "file://${default-wsroot} as iwant-url
    * we might not be able to bootstrap iwant for user, because user's own build already set default-wsroot to elsewhere!
  + bootstrap
    + run help.sh many times to generate the i-have
    + hand-modify and version wsdef source eclipse settings (active generation later, when eclipse generation is more robust and easier)
    + import as-iwant-developer to eclipse
  + svn:ignore in bootstrapper: with/bash/iwant/{target,cached,list-of}: they'll appear when used
  + development-time targets in wsdef
    + iwant main classes
    + local tutorial
      + target
      + use new bootstrapping, tersely (alreay covered in bs tutorials)
        + path fixes, we are now under as.../with/bash, not as...
        + bugfix: eclipse settings project directory is as-\$WSNAME"-developer instead of as-iwant-developer
        + bugfix: JunitResult must prefix message about test failure
        + bugfix: add >> /dev/stdout in help.sh to see all output
        + don't generate wsDefClasses to where user targets are, polluting namespace
          and breaking laziness tutorial
        + fix path to builtin cpitems
        + pass iwant wsroot as LOCAL_IWANT_WSROOT to descript scripts instead of
          passing iwant-iwant as LOCAL_IWANT
    + local ant bootstrapping
    + local bash bootstrapping
    + local website
      (not yet: - new Content: directory with files
        - svn:extern from gluent
        - test and implement Content around it)
      - for now just use ScriptGeneratedContent
        + impl bugfix story about correctly depending on Path ingredients, otherwise website won't be
          refreshed when a tutorial has changed
        + dir with three tutorials and iwant-docs/src/main/html/website/*
  + online tutorial targets
    - fix static html links to tutorials: mention the alternatives first, then the rest in tutorial
    + ant bootstrapping
      + target
      + use remote urls if no local set
        * for now, just use HEAD
      + add -mindepth 1 to Laziness find cmd, because once it found the cached dir itsef
      + in ant bootstrapping (and not in bash) filter out iwant src svn export messages
        to shorten the article
    + bash bootstrapping
    + tutorial
      + target
      + make sure new bootstrapping works
        * for now, just use HEAD
      + remove the automatic iwant upgrade part
        * will be replace in a future story
    + website
  + targets for website publication and tagging scripts
    + copypaste content from iwant-iwant
    + diff results
  + remove iwant-iwant (the old self-bootstrapper)
    + iwant-iwant dir
    + iwant-core/src/main/bash: all but new-eclipse-env
    + delete all caches and want all targets to verify
      * note: can't use find as-iwant-developer/with/bash/iwant/target/ -name as-path | bash
        because the two processes will have a race condition because atm iwant refreshes
        wish scripts on all runs
    + make sure nothing gets written to iwant-iwant
      + don't use it for optimization cache
  + symbolic link to bootstrapper so we use latest and to reduce network traffic for users
    (- remove ".." from paths with something else than "File.getCanonicalPath()" and "readlink -f", because they both break symlinks (resolve away)
      - for dirs, use the old (cd DIR && pwd) trick
      - find or write the java solution)
    * canonical might be a good idea, after all: cached data should be shared even if we have
      several symlinks to a workspace
    * besides, ant seems to use canonicalPath so it doesn't work with symlinks (it created i-have under
      iwant-bootstrapper)
    + so instead: just symlink the individual boostrap phase1 files (help.sh, build.xml) under
      versioned with/{ant/iw,bash/iwant} dirs
  + rebuild iwant-bin iff sources have been touched so we get latest functionality in use
    + the normal depends=...status unless=...-uptodate for classes and bin
    + also phase1 svn export needs to be redone iff i-have/iwant-from.conf states the iwant-url
      is a dir and its content might change (and in iwant we do state that)
  - publish website and mark this story done
    - impl the iwant-rev removal story: let's not confuse users
    - make a tag
    - make remote tutorials point to the tag instead of HEAD
    - then publish

#################################################################
= Planned
#################################################################

- logging: one letter to show if the generated target is a local (workspace) or global (user cache) one

- As @buildscriptuser I want downloaded files cached by sha256 so the file is not downloaded again if some other buildscript uses a different url
  * sha256 would then be mandatory for all downloads

- security guard: whenever opening file for writing, make sure the canonical path (what about symlink resolving?) points to an allowed directory
  * important when building a path from url for example

- bugfix: show javac error messages in bash cli (using iwant-prefix)

- bugfix: delete cached file if refresh fails, otherwise partially created file will make next run think it's uptodate

- As @developer I want new tests for automatic rebootstrap after editing iwant-from.conf now that sha verification support cannot be used for that in tutorial
  * new bootstrapper has to use a rev that already implements sha so another way is needed
  * now that iwant-rev is no more used, cached iwant is always in the same directory, so
    the probability of the feature being already broken is high!
  - make iwant/help.sh print svn revision?
  - junit test for sha, if there is none

- As @developer I want a fixed version of descript so we no more need >> to make sure script output doesn't delete previous output and break descript output assertions

- As @buildscriptauthor and @buildscriptuser I want to define cached name and target name so e.g. cached html files are more easily deployed/displayed and the "logical" name can express the meaning
  - test normal case
  - test name clash is detected and "use subdir" hint is given
  - test subdirs in cached name work
  - use in iwant website target

- potential bugfix: filter out .svn etc when determining directory modification time
  - test with .svn
  - manually filter or use and Fileset

- As @developer I want to see some progress messages in stderr so I can more easily detect problems and remember/understand what's going on
  - replace/enhance TextOutput.java

- As @developer I want WsDefClasses to inherit some abstract super class together with Target instead of extending Target, to be able to make Target final again so users don't get any stupid ideas about having to extend it
  * Path logic should be the same in every workspace; new Content can and should be defined easily 

- As @buildscriptauthor I want WsDefClasses to put contentdescription in a different cache dir than my own targets, to avoid name clashes (just like the actual cached content already does)

- As eclipse user I want iwant to warn as long as I have outdated eclipse settings that differ from the ones defined in my wsdef so I won't debug classpath problems in vain
  - eclipseProjects outdated => warn
  - after that cached ecliseProjects different than "deployed" ones => warn

- As @buildscriptauthor I want to define extra ingredients not mentioned in a script but indirectly needed at runtime so the script will be rerun when those ingredients have changed
  * e.g. bootstrapping-with-bash.sh sources bootstrapping-with-ant.sh and
         descript.sh sources descript-functions.sh

- bugfix: As @developer I want to see an error message when bootstrap fails because of compilation error caused by missing svn add of new file 

- As @developer I want to refactor all ouput to go through the same interface, to make sure everything is prefixed, and to perhaps control verboseness later

- As @developer I want iwant-url replaced with iwant-from, because it's not an url in the iwant workspace
  * and when iwant-rev has been removed, the file iwant-from.conf only contains iwant-from

- As programmer I want to reuse another project integrating on source and build level so I don't need hassle with binary releases
  * dependencies could be handled through an interface per classpathitem in the Path that defines the needer
  * then both sides can define those whatever way thay want, binary or source
  * TODO more stories: what if 3rd party binary dep could declare version constraints like
    "at least 2.x"

- "reactive" bugfix: print prefix in an ant message (how is this possible?) won't cause that line to be printed when using bash

- enhancement: As @developer I want internal error stacktraces printed prefixed so I can debug more easily

- As @buildscriptuser I want script generated content (e.g. iwant descripts) to refresh stderr more frequently, if java exec allows this, so it will be easier and more reliable to track script progress

- As @buildscriptauthor I want bootstrapper to help generate eclipse settings before telling to edit the workspace definition, because I want to use eclipse for editing it

- As @developer I want generated eclipse settings so no more duplicate classpaths
  - define all eclipse projects using iwant
  - document copying them in place
    OR: see story about side-effects
  - refine eclipse stories and implement to make it more usable

- As @buildscriptauthor I want to define side-effects, not only targets, so that I can e.g. put eclipse settings in place
  * clear separation: iwant/target/.../as-path and iwant/side-effect/.../effective
  * technically probably much like target

- If needed for performance, as @buildscriptuser I don't want iwant bootstrapper to check timestamps but instead trust that iwant-bin is unmodifiable

- As eclipse user I want jar classpaths to point to the workspace-relative as-WSNAME-developer/with/bash/iwant/cached/... instead of absolute paths so the workspace is easier to move (maybe) and so I can choose to version them when it's a pragmatic choise.

- bugfix: as @buildscriptauthor I want iwant to fail if I define two targets with the same name instead of just overwriting

- bugfix: As @buildscriptauthor I want the generated wsdef class to compile without warnings (add missing @Override annotation)

- As a bash user I want the bootstrapper to download and use an ant distro so I don't need to install ant
  * also better control over ant features
  - bash bootstrapper phase1: download and extract ant distro
  - ant phase1: download the same ant distro (to the same location) and take the jar deps from it instead of downloading them separately

- As @developer I want the timestamp hack to be invisible to tests so I don't need to assert a file hasn't been touched by asserting its timestamp has moved back 2 seconds.

- As a @buildscriptauthor I don't want to see iwant tests in my classpath so I don't accidentally use them
  - separate iwant-main-classes and iwant-test-classes in phase2.xml

- As a @buildscriptauthor I want iwant to test itself during bootstrap when the tests are fast
  - make sure nothing is downloaded from network
  * note: run _only_ during bootstrap
  - _if_ testarea still needed, create one

- @maybe as a @buildscriptauthor I want bootstrapper to generate example files that need editing before it agrees to continue so I won't screw things up by running the bootstrapper again before really editing the confs
  - descript all
  - choose option:
    * just compare content to the example string
    * put extra conf "remove-me"
    * put confs in comments

- As a @buildscriptauthor I want the bootstrapper to use an ".unverified" temp dir for classes (like svnkit download does before md5 check) so compilation failure won't leave the system in a broken state

- As a @developer I want to clean up the code here and there to get ready for adding lots of features and to make things easier otherwise
  + rename Suite to IwantSuite to differentiate it from other projects
  - split WorkspaceBuilderTest
    - reusable utilities in base class or driver
      + methods in base class
      - helpers for src content declaration
      - use all helpers
    - split by feature

- As @buildscriptauthor I want to use some simpler syntax for the whole buildscript so iwant will be more ergonomic for really small projects that don't need java and IDE for anything
  * ngr or even simpler?
  * if custom content or anything fancier is needed, I guess it's ok to require java

- As a @buildscriptuser I want the generated eclipse project to use normal src, because subclipse doesn't show local changes in linked sources
  + implement
  - test in real project (gluent)
  - descript that now the project files need to be copied in place, the projects don't
    work if imported from the cache

- As a @buildscriptuser I want several srcs in an eclipse project
  + implement
  - test in real project (gluent)
  - descript

- TODO eclipse project stories
  - dep to other eclipse projects as project deps, not to iwant cache
  - src dir from the classes target, not hardcoded "src"
  - and support multiple sources for the classes (if supported by the JavaClasses content)
    * or some other helper to create an eclipse project for given classes and test-classes
  - src link name? maybe src-main or something, when supporting many sources and test classes?
  - distinction between targets and nontargets is clumsy: why not just declare all needed paths as dependencies? would make it easier to build eclipseprojects from javaclasses
  - somehow make it unnecessary to get content from target and cast it

- As a @buildscriptauthor I want the bootstrapper to guide me to configure the workspace and its wsdef and generate the wsdef stub
  * help.sh=>ws-info.conf created; edit it and rerun help.sh=>a working ws and list-of/targets for it
  * make the functions work with the new as-x-developer/iwant wording instead of the old "centralized iwant" iwant/as-x-developer wording
  + modify the bootstrap section of tutorial
  + make it pass
    + use paths relative to iwant (wishdir)
    + etc
    + improve descript (ext ngrease) to support relative in and out and explicit file creation content path
  - clean up dots<->slashes conversions (java package) in the bootstrapper
  + fix: some script puts and extra "/iwant" in a path (the iwant test during bootstrapping?), generating an extra local change when running refresh.sh
  + upgrade tutorial revisions and publish

- As a @buildscriptauthor I want iwant the JavaClasses content to remember the order of "using" calls so I can control the actual classpath in the unfortunate case I need classpath items that contain the same fqcn's with different semantics (a real problem in the real world, especially in the enterprise/xml world)
  - save the cpitems internally in a list, even though publishing them as an alphabetical sortedset for depencency management
  - use the list during compilation
  - use the list when generating eclipse .classpath

- As a @buildscriptuser I want to be able to move the whole workspace without breaking iwant
  * use only relative paths internally
  * should be mostly done, but
  - descript and fix possible problems

- As a @buildscriptuser I want any output relative paths in a minimal form, without extra ".."s
  - mostly the bootstrapper outputs these, find out where else
  + the "target/X/as-rel-path" now works nicely

- As a @developer I want to move shell functionality into sourcable functions so that it will be easier to create different wrapper scripts and to restructure the scripts
  + bootstrap functions
  + as-iwant-user targetscript generation
  + separate step for using iwant on iwant (creating the as-iwant-developer dir)
  + replace the internal scripts with functions
    + remove the unneeded iwant-path.sh
    + make to-use-iwant-on use just one sourced function call
  - use only relative paths to source functions in all wrappers scripts
  - mark this story done when it has proven itself by making the "as-x-developer/iwant" structure possible
    + that's done but
    - the final proof will be that relocating the whole workspace won't break anything (another story)

- As a @buildscriptauthor I want all cached targets invalidated when iwant is rebootstrapping itself because I changed its version
  * even downloaded files, for now (the "don't do it" rule of optimization)

- As a @buildscriptauthor I want to define my targets in a tree of ContainerPaths for even easier organization
  - descript
  - PathDigger must detect and dive into methods that return a child ContainerPath
  - maybe there is no reason *not* to keep on prepending path names with their
    parent (container) path name

- As a @buildscriptauthor I want to be able to define tests for my workspace definition so if I break it iwant won't use it
  * this is essential for bootstrapping

- As a @developer I want iwant itself compiled with its workspace definition and tested with it so that I can bootstrap the whole tool, tested and working
  * if iwant gets later split into submodules, include only essentials here

- As a @buildscriptauthor I want an error message if I refer to a java classes directory with a missing source
  * in the tutorial, call these test classes, to maintain the red-green cycle later
  + done but untested and undefined details

- As a @buildscriptuser I want an error message if I refer to a java classes directory of uncompilable sources
  + done but untested and undefined details

- As a @buildscriptauthor I want to define a target for debugless java classes so I can ship my code

#################################################################
= Story sketches, to be evaluated and or rewritten
#################################################################

- todo write stories:
  - "i just touched src X, what needs refreshing"
  - "autoupdated entrypoint build.xml that can also be imported to eclipse as a gui for iwant of the ws"
  - root could just have one target, all, and list-of/targets would be its direct deps
  - refresher must delete cached target if refresh fails
  - todo gen wishscripts lazily

- EPIC: As a @buildscriptauthor that has to serve users that don't have unix tools installed I want iwant to provide a JPC-based virtual machine for running my scripts
  - a way to command the VM and read its results
  - a very minimal disk image that contains basic tools

- As a @buildscriptauthor I want an easy way to define a virtual machine image that contains the software I need so the base image shipped with iwant can be small

- As a @buildscriptuser I want to see a refresh plan for any target so I know if I really have time to refresh it yet

- As a @buildscriptuser I want to see a time estimate in a refresh plan, based on previous refresh(es)

- As a @buildscriptuser I want iwant to refresh targets automatically in parallel and letting me define the number of threads to use
  - TODO on commandline, in a conf file, something else or all of them?
  - TODO automatic detection of cpu count and using it for a good default?

- As a @buildscriptauthor I want to declare some targets single-threaded so targets depending on it get never refreshed in parallel
  * e.g. for tests that need the display, a certain shared sql table area or some other shared resource

- As a @buildscriptuser I want targets refreshed in an order that tries to find cumulative problems as early as possible
  * meaning targets that are most depended on are built first
    so if they have problems, their dependencies probably need
    to be refreshed again anyway
  * if equal, recurse into targets depending on them

- As a @buildscriptauthor I want iwant to use some non-default package for my workspace definition class and iwant still to be able to auto-detect the source directory location
  * read the package declaration from the java file to deduce where the src root is
  + now as-iwant-user/to-use-iwant-on requires all data as cli arguments
    so this story no more makes sense

- As a paranoid @buildscriptauthor I want some control over the validity of my downloaded targets
  * if the current consistent "assume nobody is fool enough to touch the cache" strategy seems to work,
    just provide a wish for checking the cached targets, one by one or all at once
