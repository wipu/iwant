- junit 5
  + already did before writing this: runner for it
  + separate module so it can be used in iwant
  + 3 and 4 support to plugin classpath
  + cleanup some of the redundant ext dep definitions
  - change each mod eclipse conf (manually) to run with junit5, convert at least 1 test to 5
  - simplify iwant for iwant (our iwant.sh): simply use a magic string for tmp, remove by it from cache
  - optional old runner when defining javamodules: fluent methods for these
  + convert all tests to junit 5
    + 4
    + 3
  - document: in own modules class it's wise to funnel throug a myModule method
    - deprecate and even remove commonSettins
    - ha, maybe even force by defining abstract myModule method

- now with newer java simplify file IO, what else?

- fix local website: broken since who know when
  - fix
  - make part of continuous practice (maybe after the /tmp usage story)

- all core and plugin dependencies to exactly one place, usable for users, too

- conf: *all* possible caches under /tmp, to save SSD and time. Also to force testing against internet rot.
  + iwant-test-area especially!
  + target temp dirs
  - global setting to only use global cache for downloads, nothing else, TODO how?
    - maybe: user can tell something is so slow it needs to be cached permanently
  - empty intermediate caches success TODO how to define intermediate? user?
  - personal projects (c compilation!), imagemagick, all scripts
  - iwant's all caches (unzipped local etc)
  + eclipse settings, wish script writing: only write if changes
    * also may improve laziness with some (future) features
  - what else

- "text file busy" bug. Still valid and breaking our build. Still neglected.
  * So: maybe retry and warning logs?

- migrate to java 11 (EDIT: 17)
  * eclipse forced this (11) :/
  + use it, fix things (upgrade libs, don't use deprecated apis etc)
  + increase heap size in bash bootstrapper (java 11 may consume more, at least in one project)
  + use 11 in ant bootstrapper
  + upgrade iwant for iwant
  + fix website build: ant javac doesn't like 11 ?!
    + upgrade ant deps, not helping
    + upgrade ant in host OS, that does it
  + use spotbugs: findbugs is now finally broken
    * wow, really a drop-in replacement: FindbugsReportTest was ignored 2.5 years, and getting
      it to work was just a matter of pointing the url to github spotbugs instead of sourceforge findbugs
      and updating some strings here and there to match the change. But no other parts of production
      code needed changes! The old findbugs ant target works as such. Thank you, spotbugs team!
  - cleanup
    - use name spotbugs instead of findbugs everywhere

- Clean up Windows bash detection: if possible, use env to detect
  cygwin bash, too, so no hardcoded paths will be needed

- @bugfix: flaky test
  * expected:<1554702261000> but was:<1554702262000>
  * at org.fluentjava.iwant.entry.tests.IwantTest.testBootstrapperIsNotCompiledIfNotNecessary(IwantTest.java:433)
  * also Iwant3Test.testUsersWsClassesAreNotRecompiledIfNoIngredientHasChanged(Iwant3Test.java:834)
  + filelog start of mentioned tests, to find correct details from log when this happens
  - fix
  - remove filelog from the mentioned tests

- document parameters for target implementor
  * JavaClasses, up-to-date, change debug flag => dirty

- fine-tuning after sf.net -> github migration
  - reusable test setup, at least mocked iwant zip (I guess I have an ever ongoing story for this...)
  - update external references (url and license have changed)
    - find out what they are :)
  - remove unnecessary gitignores from root .gitignore (under # svn...)
  - advertise
    + facebook
    - mention in the reddit thread (if commenting still allowed; otherwise: new thread)
    - elsewhere

- improvements for target written in bash
  - make descript examples less abstract, do something at least semi-useful
    at least add such an example after the artificial examples
  - explanative text to the descript chapter
  - naming: functions in target.sh: input and output?
  - is needed: use ScriptGenerated in a way we get cygwin support
  - corner case tests needed
    - escape cases for ingredients-and-parameters output
      - especially parameters that can contain anything
  - source target script before defining nonoverridable functions, for robustness
  - further stories
    + java target impls accessable via script language libraries?
      * yes, this follows naturally
    - side-effects, or are they easy enough with "iwantish" scripts?
    - python library
    - script that creates ws that supports writing targets only using
      bash&editor (downloadable so no installation needed)
    - split to dedicated modules?
    - prefix all bash functions so no accidental name clashes with user code
    - test incorrect usage of target function in _index.sh
    - target that finds ingredients from list of targets
      * if this is needed!
      - simple case
      - prevent cycle

- improvements to workspace api related code
  - remove redundant stuff from wishdefcontexts: if given at ws creation,
    not needed there (maybe other contexts can be removed)
  - fix implementations according to new naming
    + method workspaceClassname -> workspaceFactoryClassname
  - fix variables according to new naming
  - fix documentation according to new naming
  
- tutorial improvements
  - writing own side-effects
    - want some target
  - concatenated before its first use
    - also here just add the missing feature: line(String)
    - this is a good example of automatic dep tracking
  - prerequisites for tutorial
    - understand basic shell
      - some grepping
      - xargs cat for displaying target content
  - ant is 1st example to show output goes to stderr => xargs cat works
  - after jacoco: distribution dir, with run.sh
    - new feature to Directory: executable copyOf
  - use dot syntax in binary groups
  - bootstrapper alternatives
    + svn externals
      + cmds
      + explanations
    - iwant-iwant.sh
      - publish the script
      - tutorial: create iwant-from, svn co and use the script
      - explain the idea: minimal amount of iwant text to commit to
        project's own repo

- @bugfix @antstderrbug
  * AntGeneratedTest started failing: if >2 tests methods are run, assertions of stderr fail
    * ant really doesn't print anything after mentioning the build script: I printed stuff before
      and after calling ant, and they can be seen by the test

- reliable assert of jacoco txt report content
  - find out what jacoco promises
  - if nothing, suggest they do
  - sort in test before asserting

- robust update of jvm: refresh targets
  - maybe put version in global cache dir name
  - maybe automatically add to content descriptors

- define default java compliance in JavaClasses, not the caller of it

- improvements to ScriptGenerated
  - tell story about making it easier to run unix commands in path, now
    caller of execute needs to prepare a script for it
    + concatenated takes native and unix paths
    - use slashes in native windows paths
      + concatenated
      + binmodule
      + eclipse settings
      + scriptgenerated cygwin wrapper path
      - other?
    - test on Windows and fix usages of concatenated
  - either make all tests pass on Windows or write a story about it
    + make some tests green: slashes, newline hacks
    * very difficult

- As @developer I want IwantTestCase fields private so I can be more confident that the subclass intentions are still valid, especially regarding test area root versus wsroot
  + hide fields temporarily and replace some direct refs with method calls
  + hide testArea, fix refs
  - hide wsRoot permanently and fix all refs

- more TestNG tasks
  - stories about more helpful and cleaner output at test failure
  - cleanup: WorkspaceDefinitionContextImpl.commonsIoJar is Path, not Downloaded
  - cleanup: iwantExampleWsdef module deps in alphabetical order
  - real test
  - polish text for descript

- As @buildscriptuser I want iwant to first test a module whose sources I have touched most recently so I get test failure as fast as possible
  * more generic: refresh ordering depends on ingredient timestamps

- IwantWsRootFinder: give the root, not only essential, and use that instead of essential whenever
  you really want the parent (the root)

- As @buildscriptauthor I want to define ingredients without names so that I can save typing; I never read content descriptors so it's ok if the names are generated

- As @eclipseuser I want an option to have eclipse installed with the scala plugin so I can edit scala without manually installing the plugin

- As @buildscriptauthor I want to optionally use full names for binary modules loaded from repository so I can use org.eclipse.core.runtime and swt.runtime of the same version at the same time
  * on the other hand, these jars may not even work together, but there may be other cases like this

- code affecting target changes -> dirty
  * As @buildscriptauthor
    I want a target to be dirty if I have changed code
    so that the cached content will be valid
  * this is difficult, without making everything dirty when wsdef classes changed

- @epic As @buildscriptauthor I want external dependencies to handle their dependencies automatically so I don't need to define them
  - example: jacoco distribution depends on a certain version of asm
  - jacocoreport: if no jacoco dist defined, use latest with correct asm
  - use tested ant by default, too
  - use in tutorial
  - what others?

- As @buildscriptauthor I want to split my wsdef(def) into many modules so it's easier to maintain
  * maybe now it's time to inject context in (optional?) constructor of wsdefdef
  * also maybe inject wsdefdef to wsdef
  * otherwise it's clumsy to define a build-time module that depends on iwant
    so that the module can be used like normal modules
  - after changing, change also generated example and tutorial

- As @developer I want own type for urls, to work around all problems of java.net.URL, especially the hashCode DNS brainfart

- As @developer I want the ant output "Total time" lines away from the tutorial so it will be reproducible
  * also: as @buildscriptuser I want compact ant output so the tutorial will be easier to read
  + upgrade ant in tested deps
  + upgrade ant for own build of iwant
  (- add -S to all ant calls
     * argh: that suppresses output from java executed by <java>)
  (- pass own logger to ant calls
    - AntGenerated
    - commands in tutorial
    * even that does not work, at least with a small effort:
      Main does not accept -lib, Launcher would be a big effort to use.
      And having ant in cp of AntGenerated easily breaks things.)
  - so, easiest: add flag --deterministic-output to ant
    - feature request
      + submitted: https://issues.apache.org/bugzilla/show_bug.cgi?id=57243
      - take into use, if fixed 
    - patch?
  - remove unnecessary grep -v's in tutorial

- As @buildscriptauthor I want to define source and target compliance separately to javamodules and javaclasses so I have more control over sources and targets
  * e.g. forcing old bytecode on modern machines
  * currently javamodule has javaCompliance, javaclasses has source
  - make both have both attributes, keeping javaCompliance convenience
    for setting both simultaneously

- As @buildscriptauthor I want classes excluded from jacoco report by classname pattern so my special classes e.g. configuration does not affect the result
  * offline instrumentation required, a bigger change to the way we use jacoco

- As @developer I want to exclude findbugs testfodder etc from the findbugs report of iwant so I don't get false positives
  - support for findbugs filter
  - use it

- stories about defining java classes with different settings (e.g. no debug) for java src modules

- As @buildscriptauthor I want iwant to give a friendly error message during compilation at the latest if a resource directory is missing so I can fix the module definition
  * currently throws NPE

- As eclipse user I want to have .classpath files that are identical on all workstations so I can version them so solving eclipse settings problems is easier (for example after iwant upgrade)
  * afaik this requires classpath variables
  + new-eclipse-env.sh defines USER_HOME
  - optional setting for EclipseSettings to use the variable
  * postponed, because this is a bit too laborous to normalize at this point: /home/wipu/.net.sf.iwant/cached/ClassesFromUnmodifiableIwantWsRoot/%2Fhome/wipu/.net.sf.iwant/cached/UnmodifiableUrl/http%253A/%252Fsvn.code.sf.net/p/iwant/code/trunk%2540595

- @anticipated As @buildscriptauthor I want full control over the java module runtime path order so I can use fragile enterprise modules like xml parsers

- @epic As @buildscriptauthor I want all observable collections of api implementations to be protected against mutation after building them so I don't accidentaly cause bugs
  - JavaModule impls
  - Targets

- As @developer I want a reliable classloader so that I can use AntGenerated even if I have ant.jar without ant-launcher.jar in my classpath
  * case: AntGenerated fails to load ant classes, if ant.jar is in classpath without ant-launcher.jar
  * this is because urlclassloader delegates to parent, and it will fail to load the main class because it refers to another class in the missing ant-launcher.jar
  * the child classloader (urlclassloader) never gets an opportunity to load the class that it would be capable of loading
  - a classloader that can load missing classes from the given urls and at the same time load system defaults from the parent (quite an @epic I guess, unless we use a 3rd party utility, and only use the current simple classloader for bootstrapping)

- As @buildscriptauthor I want to define (fluently) a ruleset for PMD so I get only the warnings that really are an issue in my code

- As @buildscriptauthor I want to define runtime dependencies to a binary module so a module using it automatically gets the runtime dependency in its test and runtime classpath
  - make sure the concepts test-runtime and runtime dependencies exist and work

- @bugfix: EmmaReport must not fail by trying to access the nonexistent ec file, if a module has tests but they don't call any main code

- As @developer I want a layer on top of File so I can test the emma backslash problems and also start making it more user-friendly than File
  - make ctx.cached(Path) return new type
  - follow the compiler

- As @buildscriptauthor I want a convenience method Untarred.from(src) that detects the compression to use and derives the target name from src so I don't have to type them 99% of the time

- As @buildscriptauthor I want a findbugs report of my code so I can fix bugs
  - enable and fix test in iwant-plugin-findbugs
    - use ant or something
      - use full untarred distro of findbugs
      - fork jvm, setting findbugs.home

- As @buildscriptuser I want an easy (automatic) way of ensuring that eclipse settings refer to existing external dependencies so I don't get broken compilation
  * should eclipse-settings always depend on them, why not?
  - if so, make it possible for side-effect to depend on targets

- @bugfix: fix: parallel script run sometimes fails with "text file busy"
  * may be caused by chmod!
  + cleanup closing in StreamUtil and FileUtil
  + utilize pipe in copying of files
  - incr numbers in WishEvaluatorTest.testScriptsWorkCorrectlyInParallel()
  - test chmod in isolation
  - fix, try to find even a workaround

- @refactoring: As @developer and @buildscriptauthor I want test utilities, like mocks, for easy and nonverbose testing of iwant and iwant-based code
  + new package: testing
  + rehearse by moving a couple of test utilities there
  + move all, creating a different package for entry2/3 stuff
    + WsRootFinder
    + test area 2
    + all testareas
    + reuse code btw testareas (could also combine,
      but separation may be handy later)
  - test Concatenated and HelloTarget in their own modules
    - also JavaBinModule
    - maybe another module for these
    - modularize test tools so testing is possible
  - reusable mocks of iwant interfaces/classes
  - object mothers/testworlds for nonverbose setUp and tearDown

- @enhancement: don't put duplicates of classes for emma coverage, even if they come from cumulative test and main deps

- @enhancement: clean up the way JavaSrcModule defines test classes.
  * Maybe better to just use a regex, whether it matches one suite or many classes
    * just rename the string setter as testClassRegex and always use it
  * no, better to have exact name and regex as separate properties =>
    exact name passed to junit as such, regex is used by ClassNameList
  - use a sane default for the regex (*Test, not Abstract*) when
    neither setting given (syserr this so the magic won't be completely
    black)

- @bugfix: As @buildscriptauthor I want combined sources updated when iwant sources are re-exported so I can see fresh sources when I develop using iwant-from a file
  * But keep it fast

- As @buildscriptauthor I want target JavaClassesWithResources so I get classes and resources under the same directory, which is easier for classpaths 

- As @developer I don't want iwant tests rerun just because testarea was touched so that it gets rerun only when real sources were touched

- @bugfix: As @buildscriptauthor I want iwant to xml escape jvmargs passed to EmmaCoverage so I don't have to do it

- @bugfix: indirect ingredient check does not work with many instances of the same Path
  - see if it's time to make Path an abstract class that fixes equals,comparable,hashCode for good

- @bugfix: eclipse env script generates unix-style path to workspace in cygwin => windows eclipse looks under C:/thepath instead of C:/cygwin/thepath
  - see what else needs cygpath
  - maybe tell a story about generating eclipse for another machine

- improvements for Downloaded checksum handling
  - SHA-256: store map of algo->expected key
  - url for checksum instead of the value, use in FromRepository.ibiblio

- exit status chapter to tutorial, and test ant and bash cli failure there

- As @developer I want the old iwant build to use the current distillery version of iwant so I can get start getting rid of the old main branch
  + practice eclipse project declaration in dummy project first
  - make the change, using svn:externals to control version
    * keep current wsdef, for copying website building and tagging scripts
  - generate all eclipse projects
    + first wsdef and wsdefdef
    + delete as-iwant-developer eclipse settings
    + delete iwant-lib-{ant,junit}
    + delete iwant-core as eclipse-project, keeping the files
    + delete ref to lib-junit from distillery projects
    - generate eclipse settings for all projects
      + testJava and testDeps for JavaModule
      + testJava and testDeps affect .classpath
      + upgrade svn:externalized iwant to utilize these
      - local classdir for JavaModule
      - add testJava to all projects
      - then make iwant ws generate all eclipse settings
  - svn:ignore generated eclipse setting files
  - create public (remote) version of the bootstrapping tutorial
  - adapt the current iwant ws to use the new bs tutorials
  - adapt the static html
  - delete old wsdef 

- @bugfix: make sure iwant deletes cached target before refreshing

- make Iwant3Test use modified wsname to verify no hard-coded example stuff there

- findings from real usage:
  - targets() should just return collection of Paths, not Targets, wishes may be reasonable against ExternalSources for example
    - but fix externalresource wish script path handling, the leading slash breaks number of ".."s
  - binary javamodule should have empty deps, not null

- As @buildscriptuser I want iwant to fail if I try to run it several times in parallel for the same workspace so it doesn't corrupt anything
  * locking, also mention lock location in case a run failed to delete it

- As @buildscriptuser I want to declare worker count once for my OS user so I don't need to create and maintain ws-specific files

- @bugfix: delete cached file (or content descriptor) if refresh fails, otherwise partially created file will make next run think it's uptodate

- @bugfix: as @buildscriptuser with @wintoys I want a target refreshed when a source has been DELETED
  * I remember having the problem with Windows that it doesn't touch timestamp of parent
    when deleting a file, so IF this is really the case and a wuser demands:
  - update the test to touch parent timestamp back after deleting the file to prove need for the fix
  - use same TimestampHandler than Iwant2
  - a dedicated cache dir for source dir listings
  - refactor: common supertype for Source and ExternalSource

- As @developer I want this long and deep text broken into a readable list of stories (not too detailed), both to done and planned, so I can analyze how I proceeded and also see what has been done and what not:
  - optimization: don't even write descriptor for source
  - unmodifiable target is cached under user-global cache
  - unmodifiable target descriptor is also under user-global cache
  - wishevaluator aspath returns File, not prints
  - laziness: handling of cached file if stream requested
    - if ingredient says it's cheaper to regenerate stream and nobody needs file => delete file (saving uptodate check)
    - if uptodate cached file exists, use it
    - if oudated cached file exists
      - only stream requested => delete cached file
      - someone else needs as file => tee to file while streaming
  - delete old wish scripts at refresh
  - descript: modification of wsdef causes different output
  - move WsRootFinder to main src from test
  - dedicated module for WsRootFinder, replace other classpath markers (in testarea at least) with this
  - laziness of compilation of unmodifiable
  - remove the zip tests using versioned zip files now that we have the svnkit unzip test
  - checksum after download
     - test download of incorrect content causes failure (sha check)
     - test sha failure causes rename of cached file
  - incorrect iwant-from => friendly error
  - maybe: more expandable contract between entry and entry2
    - instead of assuming entry2 can only depend on entry, there could
      be a text file that can be passed as the source list to javac
  - new name for cache: as-someone/.iwanted
    * no more with/bash: cli does not matter
    * past tense shows for the possible user of the path that this is potentially stale data
  - user-specific external dependencies cache: ~/.iwant/cached/by-url/<escaped-url-with-slashes>
  - maybe: another entry method: one with given iwant-from, for fully embedded case
    where a file is not needed for that
    ? on the other hand, the as-someone dir is needed anyway
  - remove main and its tests from core
    * the entry is the only main, from then on just proper java
  - from java both entry and entry2 are usable as entry points
  - publish
    - modify bootstrapping tutorials
    - clean up the other bootstrapper story

- only one place for reading bytes/string from stream
  * currently Iwant, Iwant2 and StreamUtil
  * maybe just keep StreamUtil as facade

- As @buildscriptauthor I want iwant not to overwrite my wsdef even if I delete wsdefdef and iwant regenerates it and it points to my existing wsdef so that I don't lose my work

- As @developer I want better names for wsdef and wsdefdef (IwantWorkspaceProvider and IwantWorkspace) and also for their eclipse projects
  * for example currently the java interface for wsdefdef is WorkspaceProvider
  - rename interfaces
  - rename java references
  - rename non-java refs, like in i-have

- As @developer I want cached content descriptor logic behind an interface and use real impl only in one integration test that just tests features here and there, mock in current tests.
  * also, do the same to cached content and maybe other file functionality

- As @buildscriptauthor I want the eclipse-settings side-effect to generate settings for other projects, not only as-someone
  * here we need to fix the many hardcoded values

- As git user I want an easy way to get a bootstrap, because I cannot use svn:externals
  * option: a script to svn export and delegate to help.sh
  * option: downloadable package, to be commited

- As git user I want an easy way to ignore generated iwant stuff
  * either restructure so commited stuff is in different dir than generated
  * or a helper side-effect/script or something

- As @buildscriptauthor I want iwant to generate working wishscripts for my own side-effects so I can use iwant for scripting, not only defining and refreshing artifacts in the cache
  * maybe a more concrete story needed here, to make sure this really helps
    in real life
  - example wsdef provides eclipse-settings side-effect
  - test removing side-effects => no wish scripts
  - test adding custom hello side-effect
    - wish scripts are generated
    - they delegate to the side-effect

- As @buildscriptauthor and @buildscriptuser I want to declare to iwant I use eclipse so it will automatically make the side-effect of fresh eclipse settings effective when running anything
  - design good ui
  * don't do this if it's possible to break compilation in eclipse so it's difficult to fix it back
    - option: just do it after successful refreshes

- @anticipated As @buildscriptauthor I want to declare that I use IntelliJ IDEA so iwant will generate idea settings instead of eclipse settings

- As @developer I want stories from the "in progress" section of the old backlog so I don't lose good ideas

- logging: one letter to show if the generated target is a local (workspace) or global (user cache) one

- As @buildscriptuser I want downloaded files cached by sha256 so the file is not downloaded again if some other buildscript uses a different url
  * sha256 would then be mandatory for all downloads

- security guard: whenever opening file for writing, make sure the canonical path (what about symlink resolving?) points to an allowed directory
  * important when building a path from url for example

- As @developer I want new tests for automatic rebootstrap after editing iwant-from.conf now that sha verification support cannot be used for that in tutorial
  * new bootstrapper has to use a rev that already implements sha so another way is needed
  * now that iwant-rev is no more used, cached iwant is always in the same directory, so
    the probability of the feature being already broken is high!
  - make iwant/help.sh print svn revision?
  - junit test for sha, if there is none

- As @developer I want a fixed version of descript so we no more need >> to make sure script output doesn't delete previous output and break descript output assertions

- As @buildscriptauthor and @buildscriptuser I want to define cached name and target name so e.g. cached html files are more easily deployed/displayed and the "logical" name can express the meaning
  - test normal case
  - test name clash is detected and "use subdir" hint is given
  - test subdirs in cached name work
  - use in iwant website target

- potential bugfix: filter out .svn etc when determining directory modification time
  - test with .svn
  - manually filter or use and Fileset

- As @developer I want to see some progress messages in stderr so I can more easily detect problems and remember/understand what's going on
  - replace/enhance TextOutput.java

- As @developer I want WsDefClasses to inherit some abstract super class together with Target instead of extending Target, to be able to make Target final again so users don't get any stupid ideas about having to extend it
  * Path logic should be the same in every workspace; new Content can and should be defined easily 

- As @buildscriptauthor I want WsDefClasses to put contentdescription in a different cache dir than my own targets, to avoid name clashes (just like the actual cached content already does)

- As eclipse user I want iwant to warn as long as I have outdated eclipse settings that differ from the ones defined in my wsdef so I won't debug classpath problems in vain
  - eclipseProjects outdated => warn
  - after that cached ecliseProjects different than "deployed" ones => warn

- As @buildscriptauthor I want to define extra ingredients not mentioned in a script but indirectly needed at runtime so the script will be rerun when those ingredients have changed
  * e.g. bootstrapping-with-bash.sh sources bootstrapping-with-ant.sh and
         descript.sh sources descript-functions.sh

- bugfix: As @developer I want to see an error message when bootstrap fails because of compilation error caused by missing svn add of new file 

- As @developer I want to refactor all ouput to go through the same interface, to make sure everything is prefixed, and to perhaps control verboseness later

- As @developer I want iwant-url replaced with iwant-from, because it's not an url in the iwant workspace
  * and when iwant-rev has been removed, the file iwant-from.conf only contains iwant-from

- As programmer I want to reuse another project integrating on source and build level so I don't need hassle with binary releases
  * dependencies could be handled through an interface per classpathitem in the Path that defines the needer
  * then both sides can define those whatever way thay want, binary or source
  * TODO more stories: what if 3rd party binary dep could declare version constraints like
    "at least 2.x"

- As @buildscriptuser I want script generated content (e.g. iwant descripts) to refresh stderr more frequently, if java exec allows this, so it will be easier and more reliable to track script progress

- As @developer I want generated eclipse settings so no more duplicate classpaths
  - define all eclipse projects using iwant
  - document copying them in place
    OR: see story about side-effects
  - refine eclipse stories and implement to make it more usable

- As eclipse user I want jar classpaths to point to the workspace-relative as-WSNAME-developer/with/bash/iwant/cached/... instead of absolute paths so the workspace is easier to move (maybe) and so I can choose to version them when it's a pragmatic choise.

- bugfix: as @buildscriptauthor I want iwant to fail if I define two paths with the same name instead of just overwriting
  * note: even src cannot have same name as target, because content descriptors mention paths by name
  * so, if a src is replaced with target, descriptor needs to change

- As a @buildscriptauthor I don't want to see iwant tests in my classpath so I don't accidentally use them
  - separate iwant-main-classes and iwant-test-classes in phase2.xml

- @maybe as a @buildscriptauthor I want bootstrapper to generate example files that need editing before it agrees to continue so I won't screw things up by running the bootstrapper again before really editing the confs
  - descript all
  - choose option:
    * just compare content to the example string
    * put extra conf "remove-me"
    * put confs in comments

- As a @buildscriptauthor I want the bootstrapper to use an ".unverified" temp dir for classes (like svnkit download does before md5 check) so compilation failure won't leave the system in a broken state

- As @buildscriptauthor I want to use some simpler syntax for the whole buildscript so iwant will be more ergonomic for really small projects that don't need java and IDE for anything
  * ngr or even simpler?
  * if custom content or anything fancier is needed, I guess it's ok to require java

- As a @buildscriptuser I want several srcs in an eclipse project
  + implement
  - test in real project (gluent)
  - descript

- TODO eclipse project stories
  - dep to other eclipse projects as project deps, not to iwant cache
  - src dir from the classes target, not hardcoded "src"
  - and support multiple sources for the classes (if supported by the JavaClasses content)
    * or some other helper to create an eclipse project for given classes and test-classes
  - src link name? maybe src-main or something, when supporting many sources and test classes?
  - distinction between targets and nontargets is clumsy: why not just declare all needed paths as dependencies? would make it easier to build eclipseprojects from javaclasses
  - somehow make it unnecessary to get content from target and cast it

- As a @buildscriptauthor I want iwant the JavaClasses content to remember the order of "using" calls so I can control the actual classpath in the unfortunate case I need classpath items that contain the same fqcn's with different semantics (a real problem in the real world, especially in the enterprise/xml world)
  - save the cpitems internally in a list, even though publishing them as an alphabetical sortedset for depencency management
  - use the list during compilation
  - use the list when generating eclipse .classpath

- As a @buildscriptuser I want to be able to move the whole workspace without breaking iwant
  * use only relative paths internally
  * should be mostly done, but
  - descript and fix possible problems

- As a @buildscriptauthor I want all cached targets invalidated when iwant is rebootstrapping itself because I changed its version
  * even downloaded files, for now (the "don't do it" rule of optimization)

- As a @buildscriptauthor I want to be able to define tests for my workspace definition so if I break it iwant won't use it
  * this is essential for bootstrapping

- As a @developer I want iwant itself compiled with its workspace definition and tested with it so that I can bootstrap the whole tool, tested and working
  * if iwant gets later split into submodules, include only essentials here

- As a @buildscriptauthor I want an error message if I refer to a java classes directory with a missing source
  * in the tutorial, call these test classes, to maintain the red-green cycle later
  + done but untested and undefined details

- As a @buildscriptuser I want an error message if I refer to a java classes directory of uncompilable sources
  + done but untested and undefined details

- As a @buildscriptauthor I want to define a target for debugless java classes so I can ship my code

#################################################################
= Story sketches, to be evaluated and or rewritten
#################################################################

- todo write stories:
  - "i just touched src X, what needs refreshing"
  - "autoupdated entrypoint build.xml that can also be imported to eclipse as a gui for iwant of the ws"
  - root could just have one target, all, and list-of/targets would be its direct deps
  - refresher must delete cached target if refresh fails
  - todo gen wishscripts lazily

- EPIC: As a @buildscriptauthor that has to serve users that don't have unix tools installed I want iwant to provide a JPC-based virtual machine for running my scripts
  - a way to command the VM and read its results
  - a very minimal disk image that contains basic tools

- As a @buildscriptauthor I want an easy way to define a virtual machine image that contains the software I need so the base image shipped with iwant can be small

- As a @buildscriptuser I want to see a refresh plan for any target so I know if I really have time to refresh it yet

- As a @buildscriptuser I want to see a time estimate in a refresh plan, based on previous refresh(es)

- As a @buildscriptuser I want targets refreshed in an order that tries to find cumulative problems as early as possible
  * meaning targets that are most depended on are built first
    so if they have problems, their dependencies probably need
    to be refreshed again anyway
  * if equal, recurse into targets depending on them

- As a @buildscriptauthor I want iwant to use some non-default package for my workspace definition class and iwant still to be able to auto-detect the source directory location
  * read the package declaration from the java file to deduce where the src root is
  + now as-iwant-user/to-use-iwant-on requires all data as cli arguments
    so this story no more makes sense

- As a paranoid @buildscriptauthor I want some control over the validity of my downloaded targets
  * if the current consistent "assume nobody is fool enough to touch the cache" strategy seems to work,
    just provide a wish for checking the cached targets, one by one or all at once
